model Core driver EMF {nsuri = "org.amma.dsl.jdt.core"};
model DOM driver EMF {nsuri = "org.amma.dsl.jdt.dom"};
model PrimitiveTypes driver EMF {nsuri = "org.amma.dsl.jdt.primitiveTypes"};

var size = 0;
var singleMemberAnnotation = SingleMemberAnnotation.all.first;
size = size + SingleMemberAnnotation.all.size();
var enumConstantDeclaration = EnumConstantDeclaration.all.first;
size = size + EnumConstantDeclaration.all.size();
var switchCase = SwitchCase.all.first;
size = size + SwitchCase.all.size();
var enhancedForStatement = EnhancedForStatement.all.first;
size = size + EnhancedForStatement.all.size();
var arrayAccess = ArrayAccess.all.first;
size = size + ArrayAccess.all.size();
var fieldAccess = FieldAccess.all.first;
size = size + FieldAccess.all.size();
var parameter = Parameter.all.first;
size = size + Parameter.all.size();
var wildcardType = WildcardType.all.first;
size = size + WildcardType.all.size();
var switchStatement = SwitchStatement.all.first;
size = size + SwitchStatement.all.size();
var typeDeclarationStatement = TypeDeclarationStatement.all.first;
size = size + TypeDeclarationStatement.all.size();
var forStatement = ForStatement.all.first;
size = size + ForStatement.all.size();
var iJavaProject = IJavaProject.all.first;
size = size + IJavaProject.all.size();
var thisExpression = ThisExpression.all.first;
size = size + ThisExpression.all.size();
var numberLiteral = NumberLiteral.all.first;
size = size + NumberLiteral.all.size();
var simpleType = SimpleType.all.first;
size = size + SimpleType.all.size();
var iPackageFragment = IPackageFragment.all.first;
size = size + IPackageFragment.all.size();
var doStatement = DoStatement.all.first;
size = size + DoStatement.all.size();
var initializer = Initializer.all.first;
size = size + Initializer.all.size();
var block = Block.all.first;
size = size + Block.all.size();
var superConstructorInvocation = SuperConstructorInvocation.all.first;
size = size + SuperConstructorInvocation.all.size();
var variableDeclarationExpression = VariableDeclarationExpression.all.first;
size = size + VariableDeclarationExpression.all.size();
var javadoc = Javadoc.all.first;
size = size + Javadoc.all.size();
var synchronizedStatement = SynchronizedStatement.all.first;
size = size + SynchronizedStatement.all.size();
var assertStatement = AssertStatement.all.first;
size = size + AssertStatement.all.size();
var iMethod = IMethod.all.first;
size = size + IMethod.all.size();
var throwStatement = ThrowStatement.all.first;
size = size + ThrowStatement.all.size();
var parameterizedType = ParameterizedType.all.first;
size = size + ParameterizedType.all.size();
var primitiveType = PrimitiveType.all.first;
size = size + PrimitiveType.all.size();
var tagElement = TagElement.all.first;
size = size + TagElement.all.size();
var nullLiteral = NullLiteral.all.first;
size = size + NullLiteral.all.size();
var typeParameter = TypeParameter.all.first;
size = size + TypeParameter.all.size();
var constructorInvocation = ConstructorInvocation.all.first;
size = size + ConstructorInvocation.all.size();
var iInitializer = IInitializer.all.first;
size = size + IInitializer.all.size();
var markerAnnotation = MarkerAnnotation.all.first;
size = size + MarkerAnnotation.all.size();
var iJavaModel = IJavaModel.all.first;
size = size + IJavaModel.all.size();
var arrayCreation = ArrayCreation.all.first;
size = size + ArrayCreation.all.size();
var stringLiteral = StringLiteral.all.first;
size = size + StringLiteral.all.size();
var compilationUnit = CompilationUnit.all.first;
size = size + CompilationUnit.all.size();
var binaryPackageFragmentRoot = BinaryPackageFragmentRoot.all.first;
size = size + BinaryPackageFragmentRoot.all.size();
var superMethodInvocation = SuperMethodInvocation.all.first;
size = size + SuperMethodInvocation.all.size();
var enumDeclaration = EnumDeclaration.all.first;
size = size + EnumDeclaration.all.size();
var typeLiteral = TypeLiteral.all.first;
size = size + TypeLiteral.all.size();
var labeledStatement = LabeledStatement.all.first;
size = size + LabeledStatement.all.size();
var emptyStatement = EmptyStatement.all.first;
size = size + EmptyStatement.all.size();
var instanceofExpression = InstanceofExpression.all.first;
size = size + InstanceofExpression.all.size();
var sourcePackageFragmentRoot = SourcePackageFragmentRoot.all.first;
size = size + SourcePackageFragmentRoot.all.size();
size.println();
m.allContents().size().println();
