model Core driver EMF {nsuri = "org.amma.dsl.jdt.core"};
model DOM driver EMF {nsuri = "org.amma.dsl.jdt.dom"};
model PrimitiveTypes driver EMF {nsuri = "org.amma.dsl.jdt.primitiveTypes"};
var size = 0;
var iClassFile = IClassFile.all.first();
size = size + IClassFile.all.elementName.size();
size = size + IClassFile.all.source.size();
size = size + IClassFile.all.sourceRange.size();
size = size + IClassFile.all.path.size();
size = size + IClassFile.all.isReadOnly.size();
size = size + IClassFile.all.isClass.size();
size = size + IClassFile.all.isInterface.size();
size = size + IClassFile.all.type.size();
size = size + IClassFile.all.size();
var modifier = Modifier.all.first();
size = size + Modifier.all.abstract.size();
size = size + Modifier.all.final.size();
size = size + Modifier.all.native.size();
size = size + Modifier.all.none.size();
size = size + Modifier.all.private.size();
size = size + Modifier.all.protected.size();
size = size + Modifier.all.public.size();
size = size + Modifier.all.static.size();
size = size + Modifier.all.strictfp.size();
size = size + Modifier.all.synchronized.size();
size = size + Modifier.all.transient.size();
size = size + Modifier.all.volatile.size();
size = size + Modifier.all.size();
var iMethod = IMethod.all.first();
size = size + IMethod.all.elementName.size();
size = size + IMethod.all.source.size();
size = size + IMethod.all.sourceRange.size();
size = size + IMethod.all.javadocRange.size();
size = size + IMethod.all.nameRange.size();
size = size + IMethod.all.returnType.size();
size = size + IMethod.all.isConstructor.size();
size = size + IMethod.all.isMainMethod.size();
size = size + IMethod.all.parameters.size();
size = size + IMethod.all.exceptionTypes.size();
size = size + IMethod.all.size();
var methodDeclaration = MethodDeclaration.all.first();
size = size + MethodDeclaration.all.modifiers.size();
size = size + MethodDeclaration.all.javadoc.size();
size = size + MethodDeclaration.all.body.size();
size = size + MethodDeclaration.all.extraDimensions.size();
size = size + MethodDeclaration.all.name.size();
size = size + MethodDeclaration.all.returnType.size();
size = size + MethodDeclaration.all.constructor.size();
size = size + MethodDeclaration.all.varargs.size();
size = size + MethodDeclaration.all.parameters.size();
size = size + MethodDeclaration.all.thrownExceptions.size();
size = size + MethodDeclaration.all.typeParameters.size();
size = size + MethodDeclaration.all.binding.size();
size = size + MethodDeclaration.all.size();
size = size + IMethod.all.size();
var methodInvocation = MethodInvocation.all.first();
size = size + MethodInvocation.all.resolveBoxing.size();
size = size + MethodInvocation.all.resolveUnboxing.size();
size = size + MethodInvocation.all.typeBinding.size();
size = size + MethodInvocation.all.arguments.size();
size = size + MethodInvocation.all.expression.size();
size = size + MethodInvocation.all.name.size();
size = size + MethodInvocation.all.typeArguments.size();
size = size + MethodInvocation.all.methodBinding.size();
size = size + MethodInvocation.all.size();
size = size + IMethod.all.size();
var expressionStatement = ExpressionStatement.all.first();
size = size + ExpressionStatement.all.expression.size();
size = size + ExpressionStatement.all.size();
var simpleName = SimpleName.all.first();
size = size + SimpleName.all.resolveBoxing.size();
size = size + SimpleName.all.resolveUnboxing.size();
size = size + SimpleName.all.typeBinding.size();
size = size + SimpleName.all.fullyQualifiedName.size();
size = size + SimpleName.all.identifier.size();
size = size + SimpleName.all.declaration.size();
size = size + SimpleName.all.size();
var prefixExpression = PrefixExpression.all.first();
size = size + PrefixExpression.all.resolveBoxing.size();
size = size + PrefixExpression.all.resolveUnboxing.size();
size = size + PrefixExpression.all.typeBinding.size();
size = size + PrefixExpression.all.operand.size();
size = size + PrefixExpression.all.operator.size();
size = size + PrefixExpression.all.size();
var simpleType = SimpleType.all.first();
size = size + SimpleType.all.name.size();
size = size + SimpleType.all.size();
var qualifiedName = QualifiedName.all.first();
size = size + QualifiedName.all.resolveBoxing.size();
size = size + QualifiedName.all.resolveUnboxing.size();
size = size + QualifiedName.all.typeBinding.size();
size = size + QualifiedName.all.fullyQualifiedName.size();
size = size + QualifiedName.all.name.size();
size = size + QualifiedName.all.qualifier.size();
size = size + QualifiedName.all.size();
var parameter = Parameter.all.first();
size = size + Parameter.all.name.size();
size = size + Parameter.all.type.size();
size = size + Parameter.all.size();
size.println();
