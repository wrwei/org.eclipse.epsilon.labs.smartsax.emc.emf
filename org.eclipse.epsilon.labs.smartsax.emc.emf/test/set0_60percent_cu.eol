model Core driver EMF {nsuri = "org.amma.dsl.jdt.core"};
model DOM driver EMF {nsuri = "org.amma.dsl.jdt.dom"};
model PrimitiveTypes driver EMF {nsuri = "org.amma.dsl.jdt.primitiveTypes"};
var size = 0;
var markerAnnotation = MarkerAnnotation.all.first();
size = size + MarkerAnnotation.all.resolveBoxing.size();
size = size + MarkerAnnotation.all.resolveUnboxing.size();
size = size + MarkerAnnotation.all.typeBinding.size();
size = size + MarkerAnnotation.all.typeName.size();
size = size + MarkerAnnotation.all.size();
var primitiveType = PrimitiveType.all.first();
size = size + PrimitiveType.all.code.size();
size = size + PrimitiveType.all.size();
var castExpression = CastExpression.all.first();
size = size + CastExpression.all.resolveBoxing.size();
size = size + CastExpression.all.resolveUnboxing.size();
size = size + CastExpression.all.typeBinding.size();
size = size + CastExpression.all.expression.size();
size = size + CastExpression.all.type.size();
size = size + CastExpression.all.size();
var packageDeclaration = PackageDeclaration.all.first();
size = size + PackageDeclaration.all.annotations.size();
size = size + PackageDeclaration.all.javadoc.size();
size = size + PackageDeclaration.all.name.size();
size = size + PackageDeclaration.all.binding.size();
size = size + PackageDeclaration.all.size();
size = size + IPackageFragment.all.size();
var returnStatement = ReturnStatement.all.first();
size = size + ReturnStatement.all.expression.size();
size = size + ReturnStatement.all.size();
var typeDeclaration = TypeDeclaration.all.first();
size = size + TypeDeclaration.all.modifiers.size();
size = size + TypeDeclaration.all.javadoc.size();
size = size + TypeDeclaration.all.bodyDeclarations.size();
size = size + TypeDeclaration.all.name.size();
size = size + TypeDeclaration.all.localTypeDeclaration.size();
size = size + TypeDeclaration.all.memberTypeDeclaration.size();
size = size + TypeDeclaration.all.packageMemberTypeDeclaration.size();
size = size + TypeDeclaration.all.superclassType.size();
size = size + TypeDeclaration.all.interface.size();
size = size + TypeDeclaration.all.superInterfaceTypes.size();
size = size + TypeDeclaration.all.typeParameters.size();
size = size + TypeDeclaration.all.size();
var tryStatement = TryStatement.all.first();
size = size + TryStatement.all.catchClauses.size();
size = size + TryStatement.all.body.size();
size = size + TryStatement.all.finally.size();
size = size + TryStatement.all.size();
var iClassFile = IClassFile.all.first();
size = size + IClassFile.all.elementName.size();
size = size + IClassFile.all.source.size();
size = size + IClassFile.all.sourceRange.size();
size = size + IClassFile.all.path.size();
size = size + IClassFile.all.isReadOnly.size();
size = size + IClassFile.all.isClass.size();
size = size + IClassFile.all.isInterface.size();
size = size + IClassFile.all.type.size();
size = size + IClassFile.all.size();
var iJavaModel = IJavaModel.all.first();
size = size + IJavaModel.all.path.size();
size = size + IJavaModel.all.isReadOnly.size();
size = size + IJavaModel.all.javaProjects.size();
size = size + IJavaModel.all.externalPackageFragmentRoots.size();
size = size + IJavaModel.all.size();
var thisExpression = ThisExpression.all.first();
size = size + ThisExpression.all.resolveBoxing.size();
size = size + ThisExpression.all.resolveUnboxing.size();
size = size + ThisExpression.all.typeBinding.size();
size = size + ThisExpression.all.qualifier.size();
size = size + ThisExpression.all.size();
var instanceofExpression = InstanceofExpression.all.first();
size = size + InstanceofExpression.all.resolveBoxing.size();
size = size + InstanceofExpression.all.resolveUnboxing.size();
size = size + InstanceofExpression.all.typeBinding.size();
size = size + InstanceofExpression.all.leftOperand.size();
size = size + InstanceofExpression.all.rightOperand.size();
size = size + InstanceofExpression.all.size();
var ifStatement = IfStatement.all.first();
size = size + IfStatement.all.elseStatement.size();
size = size + IfStatement.all.expression.size();
size = size + IfStatement.all.thenStatement.size();
size = size + IfStatement.all.size();
var variableDeclarationFragment = VariableDeclarationFragment.all.first();
size = size + VariableDeclarationFragment.all.extraDimensions.size();
size = size + VariableDeclarationFragment.all.initializer.size();
size = size + VariableDeclarationFragment.all.name.size();
size = size + VariableDeclarationFragment.all.size();
var methodDeclaration = MethodDeclaration.all.first();
size = size + MethodDeclaration.all.modifiers.size();
size = size + MethodDeclaration.all.javadoc.size();
size = size + MethodDeclaration.all.body.size();
size = size + MethodDeclaration.all.extraDimensions.size();
size = size + MethodDeclaration.all.name.size();
size = size + MethodDeclaration.all.returnType.size();
size = size + MethodDeclaration.all.constructor.size();
size = size + MethodDeclaration.all.varargs.size();
size = size + MethodDeclaration.all.parameters.size();
size = size + MethodDeclaration.all.thrownExceptions.size();
size = size + MethodDeclaration.all.typeParameters.size();
size = size + MethodDeclaration.all.binding.size();
size = size + MethodDeclaration.all.size();
size = size + IMethod.all.size();
var enhancedForStatement = EnhancedForStatement.all.first();
size = size + EnhancedForStatement.all.body.size();
size = size + EnhancedForStatement.all.expression.size();
size = size + EnhancedForStatement.all.parameter.size();
size = size + EnhancedForStatement.all.size();
var prefixExpression = PrefixExpression.all.first();
size = size + PrefixExpression.all.resolveBoxing.size();
size = size + PrefixExpression.all.resolveUnboxing.size();
size = size + PrefixExpression.all.typeBinding.size();
size = size + PrefixExpression.all.operand.size();
size = size + PrefixExpression.all.operator.size();
size = size + PrefixExpression.all.size();
var simpleType = SimpleType.all.first();
size = size + SimpleType.all.name.size();
size = size + SimpleType.all.size();
var catchClause = CatchClause.all.first();
size = size + CatchClause.all.body.size();
size = size + CatchClause.all.exception.size();
size = size + CatchClause.all.size();
var throwStatement = ThrowStatement.all.first();
size = size + ThrowStatement.all.expression.size();
size = size + ThrowStatement.all.size();
var arrayType = ArrayType.all.first();
size = size + ArrayType.all.componentType.size();
size = size + ArrayType.all.dimensions.size();
size = size + ArrayType.all.elementType.size();
size = size + ArrayType.all.size();
var methodInvocation = MethodInvocation.all.first();
size = size + MethodInvocation.all.resolveBoxing.size();
size = size + MethodInvocation.all.resolveUnboxing.size();
size = size + MethodInvocation.all.typeBinding.size();
size = size + MethodInvocation.all.arguments.size();
size = size + MethodInvocation.all.expression.size();
size = size + MethodInvocation.all.name.size();
size = size + MethodInvocation.all.typeArguments.size();
size = size + MethodInvocation.all.methodBinding.size();
size = size + MethodInvocation.all.size();
size = size + IMethod.all.size();
var classInstanceCreation = ClassInstanceCreation.all.first();
size = size + ClassInstanceCreation.all.resolveBoxing.size();
size = size + ClassInstanceCreation.all.resolveUnboxing.size();
size = size + ClassInstanceCreation.all.typeBinding.size();
size = size + ClassInstanceCreation.all.arguments.size();
size = size + ClassInstanceCreation.all.anonymousClassDeclaration.size();
size = size + ClassInstanceCreation.all.expression.size();
size = size + ClassInstanceCreation.all.type.size();
size = size + ClassInstanceCreation.all.typeArguments.size();
size = size + ClassInstanceCreation.all.size();
var expressionStatement = ExpressionStatement.all.first();
size = size + ExpressionStatement.all.expression.size();
size = size + ExpressionStatement.all.size();
var iImportDeclaration = IImportDeclaration.all.first();
size = size + IImportDeclaration.all.elementName.size();
size = size + IImportDeclaration.all.source.size();
size = size + IImportDeclaration.all.sourceRange.size();
size = size + IImportDeclaration.all.isOnDemand.size();
size = size + IImportDeclaration.all.isStatic.size();
size = size + IImportDeclaration.all.size();
var assignment = Assignment.all.first();
size = size + Assignment.all.resolveBoxing.size();
size = size + Assignment.all.resolveUnboxing.size();
size = size + Assignment.all.typeBinding.size();
size = size + Assignment.all.leftHandSide.size();
size = size + Assignment.all.operator.size();
size = size + Assignment.all.rightHandSide.size();
size = size + Assignment.all.size();
var qualifiedName = QualifiedName.all.first();
size = size + QualifiedName.all.resolveBoxing.size();
size = size + QualifiedName.all.resolveUnboxing.size();
size = size + QualifiedName.all.typeBinding.size();
size = size + QualifiedName.all.fullyQualifiedName.size();
size = size + QualifiedName.all.name.size();
size = size + QualifiedName.all.qualifier.size();
size = size + QualifiedName.all.size();
var booleanLiteral = BooleanLiteral.all.first();
size = size + BooleanLiteral.all.resolveBoxing.size();
size = size + BooleanLiteral.all.resolveUnboxing.size();
size = size + BooleanLiteral.all.typeBinding.size();
size = size + BooleanLiteral.all.booleanValue.size();
size = size + BooleanLiteral.all.size();
var methodRef = MethodRef.all.first();
size = size + MethodRef.all.name.size();
size = size + MethodRef.all.qualifier.size();
size = size + MethodRef.all.parameters.size();
size = size + MethodRef.all.size();
var compilationUnit = CompilationUnit.all.first();
size = size + CompilationUnit.all.comments.size();
size = size + CompilationUnit.all.package.size();
size = size + CompilationUnit.all.imports.size();
size = size + CompilationUnit.all.types.size();
size = size + CompilationUnit.all.size();
var variableDeclarationStatement = VariableDeclarationStatement.all.first();
size = size + VariableDeclarationStatement.all.fragments.size();
size = size + VariableDeclarationStatement.all.modifiers.size();
size = size + VariableDeclarationStatement.all.type.size();
size = size + VariableDeclarationStatement.all.size();
var iCompilationUnit = ICompilationUnit.all.first();
size = size + ICompilationUnit.all.elementName.size();
size = size + ICompilationUnit.all.source.size();
size = size + ICompilationUnit.all.sourceRange.size();
size = size + ICompilationUnit.all.path.size();
size = size + ICompilationUnit.all.isReadOnly.size();
size = size + ICompilationUnit.all.allType.size();
size = size + ICompilationUnit.all.imports.size();
size = size + ICompilationUnit.all.types.size();
size = size + ICompilationUnit.all.primary.size();
size = size + ICompilationUnit.all.ast.size();
size = size + ICompilationUnit.all.size();
size = size + IType.all.size();
size = size + ICompilationUnit.all.size();
var characterLiteral = CharacterLiteral.all.first();
size = size + CharacterLiteral.all.resolveBoxing.size();
size = size + CharacterLiteral.all.resolveUnboxing.size();
size = size + CharacterLiteral.all.typeBinding.size();
size = size + CharacterLiteral.all.charValue.size();
size = size + CharacterLiteral.all.escapedValue.size();
size = size + CharacterLiteral.all.size();
var sourcePackageFragmentRoot = SourcePackageFragmentRoot.all.first();
size = size + SourcePackageFragmentRoot.all.elementName.size();
size = size + SourcePackageFragmentRoot.all.path.size();
size = size + SourcePackageFragmentRoot.all.isReadOnly.size();
size = size + SourcePackageFragmentRoot.all.packageFragments.size();
size = size + SourcePackageFragmentRoot.all.size();
var infixExpression = InfixExpression.all.first();
size = size + InfixExpression.all.resolveBoxing.size();
size = size + InfixExpression.all.resolveUnboxing.size();
size = size + InfixExpression.all.typeBinding.size();
size = size + InfixExpression.all.extendedOperands.size();
size = size + InfixExpression.all.leftOperand.size();
size = size + InfixExpression.all.operator.size();
size = size + InfixExpression.all.rightOperand.size();
size = size + InfixExpression.all.size();
var parameterizedType = ParameterizedType.all.first();
size = size + ParameterizedType.all.type.size();
size = size + ParameterizedType.all.typeArguments.size();
size = size + ParameterizedType.all.size();
var singleVariableDeclaration = SingleVariableDeclaration.all.first();
size = size + SingleVariableDeclaration.all.extraDimensions.size();
size = size + SingleVariableDeclaration.all.initializer.size();
size = size + SingleVariableDeclaration.all.name.size();
size = size + SingleVariableDeclaration.all.type.size();
size = size + SingleVariableDeclaration.all.varargs.size();
size = size + SingleVariableDeclaration.all.modifiers.size();
size = size + SingleVariableDeclaration.all.size();
var synchronizedStatement = SynchronizedStatement.all.first();
size = size + SynchronizedStatement.all.body.size();
size = size + SynchronizedStatement.all.expression.size();
size = size + SynchronizedStatement.all.size();
var methodRefParameter = MethodRefParameter.all.first();
size = size + MethodRefParameter.all.name.size();
size = size + MethodRefParameter.all.type.size();
size = size + MethodRefParameter.all.varargs.size();
size = size + MethodRefParameter.all.size();
var numberLiteral = NumberLiteral.all.first();
size = size + NumberLiteral.all.resolveBoxing.size();
size = size + NumberLiteral.all.resolveUnboxing.size();
size = size + NumberLiteral.all.typeBinding.size();
size = size + NumberLiteral.all.token.size();
size = size + NumberLiteral.all.size();
var binaryPackageFragmentRoot = BinaryPackageFragmentRoot.all.first();
size = size + BinaryPackageFragmentRoot.all.elementName.size();
size = size + BinaryPackageFragmentRoot.all.path.size();
size = size + BinaryPackageFragmentRoot.all.isReadOnly.size();
size = size + BinaryPackageFragmentRoot.all.packageFragments.size();
size = size + BinaryPackageFragmentRoot.all.size();
var block = Block.all.first();
size = size + Block.all.statements.size();
size = size + Block.all.size();
var modifier = Modifier.all.first();
size = size + Modifier.all.abstract.size();
size = size + Modifier.all.final.size();
size = size + Modifier.all.native.size();
size = size + Modifier.all.none.size();
size = size + Modifier.all.private.size();
size = size + Modifier.all.protected.size();
size = size + Modifier.all.public.size();
size = size + Modifier.all.static.size();
size = size + Modifier.all.strictfp.size();
size = size + Modifier.all.synchronized.size();
size = size + Modifier.all.transient.size();
size = size + Modifier.all.volatile.size();
size = size + Modifier.all.size();
var textElement = TextElement.all.first();
size = size + TextElement.all.text.size();
size = size + TextElement.all.size();
var superMethodInvocation = SuperMethodInvocation.all.first();
size = size + SuperMethodInvocation.all.resolveBoxing.size();
size = size + SuperMethodInvocation.all.resolveUnboxing.size();
size = size + SuperMethodInvocation.all.typeBinding.size();
size = size + SuperMethodInvocation.all.arguments.size();
size = size + SuperMethodInvocation.all.name.size();
size = size + SuperMethodInvocation.all.qualifier.size();
size = size + SuperMethodInvocation.all.typeArguments.size();
size = size + SuperMethodInvocation.all.size();
var superConstructorInvocation = SuperConstructorInvocation.all.first();
size = size + SuperConstructorInvocation.all.arguments.size();
size = size + SuperConstructorInvocation.all.expression.size();
size = size + SuperConstructorInvocation.all.typeArguments.size();
size = size + SuperConstructorInvocation.all.size();
var iMethod = IMethod.all.first();
size = size + IMethod.all.elementName.size();
size = size + IMethod.all.source.size();
size = size + IMethod.all.sourceRange.size();
size = size + IMethod.all.javadocRange.size();
size = size + IMethod.all.nameRange.size();
size = size + IMethod.all.returnType.size();
size = size + IMethod.all.isConstructor.size();
size = size + IMethod.all.isMainMethod.size();
size = size + IMethod.all.parameters.size();
size = size + IMethod.all.exceptionTypes.size();
size = size + IMethod.all.size();
var tagElement = TagElement.all.first();
size = size + TagElement.all.fragments.size();
size = size + TagElement.all.tagName.size();
size = size + TagElement.all.nested.size();
size = size + TagElement.all.size();
var stringLiteral = StringLiteral.all.first();
size = size + StringLiteral.all.resolveBoxing.size();
size = size + StringLiteral.all.resolveUnboxing.size();
size = size + StringLiteral.all.typeBinding.size();
size = size + StringLiteral.all.escapedValue.size();
size = size + StringLiteral.all.literalValue.size();
size = size + StringLiteral.all.size();
var nullLiteral = NullLiteral.all.first();
size = size + NullLiteral.all.resolveBoxing.size();
size = size + NullLiteral.all.resolveUnboxing.size();
size = size + NullLiteral.all.typeBinding.size();
size = size + NullLiteral.all.size();
var fieldDeclaration = FieldDeclaration.all.first();
size = size + FieldDeclaration.all.modifiers.size();
size = size + FieldDeclaration.all.javadoc.size();
size = size + FieldDeclaration.all.fragments.size();
size = size + FieldDeclaration.all.type.size();
size = size + FieldDeclaration.all.size();
var importDeclaration = ImportDeclaration.all.first();
size = size + ImportDeclaration.all.onDemand.size();
size = size + ImportDeclaration.all.static.size();
size = size + ImportDeclaration.all.name.size();
size = size + ImportDeclaration.all.size();
var simpleName = SimpleName.all.first();
size = size + SimpleName.all.resolveBoxing.size();
size = size + SimpleName.all.resolveUnboxing.size();
size = size + SimpleName.all.typeBinding.size();
size = size + SimpleName.all.fullyQualifiedName.size();
size = size + SimpleName.all.identifier.size();
size = size + SimpleName.all.declaration.size();
size = size + SimpleName.all.size();
size.println();