model Core driver EMF {nsuri = "org.amma.dsl.jdt.core"};
model DOM driver EMF {nsuri = "org.amma.dsl.jdt.dom"};
model PrimitiveTypes driver EMF {nsuri = "org.amma.dsl.jdt.primitiveTypes"};

var size = 0;
var ifStatement = IfStatement.all.first;
size = size + IfStatement.all.size();
var whileStatement = WhileStatement.all.first;
size = size + WhileStatement.all.size();
var variableDeclarationExpression = VariableDeclarationExpression.all.first;
size = size + VariableDeclarationExpression.all.size();
var binaryPackageFragmentRoot = BinaryPackageFragmentRoot.all.first;
size = size + BinaryPackageFragmentRoot.all.size();
var superMethodInvocation = SuperMethodInvocation.all.first;
size = size + SuperMethodInvocation.all.size();
var initializer = Initializer.all.first;
size = size + Initializer.all.size();
var singleMemberAnnotation = SingleMemberAnnotation.all.first;
size = size + SingleMemberAnnotation.all.size();
var switchStatement = SwitchStatement.all.first;
size = size + SwitchStatement.all.size();
var methodRefParameter = MethodRefParameter.all.first;
size = size + MethodRefParameter.all.size();
var enhancedForStatement = EnhancedForStatement.all.first;
size = size + EnhancedForStatement.all.size();
var iPackageFragment = IPackageFragment.all.first;
size = size + IPackageFragment.all.size();
var iJavaModel = IJavaModel.all.first;
size = size + IJavaModel.all.size();
var arrayAccess = ArrayAccess.all.first;
size = size + ArrayAccess.all.size();
var arrayInitializer = ArrayInitializer.all.first;
size = size + ArrayInitializer.all.size();
var tagElement = TagElement.all.first;
size = size + TagElement.all.size();
var catchClause = CatchClause.all.first;
size = size + CatchClause.all.size();
var methodInvocation = MethodInvocation.all.first;
size = size + MethodInvocation.all.size();
var instanceofExpression = InstanceofExpression.all.first;
size = size + InstanceofExpression.all.size();
var iJavaProject = IJavaProject.all.first;
size = size + IJavaProject.all.size();
var iInitializer = IInitializer.all.first;
size = size + IInitializer.all.size();
var superConstructorInvocation = SuperConstructorInvocation.all.first;
size = size + SuperConstructorInvocation.all.size();
var nullLiteral = NullLiteral.all.first;
size = size + NullLiteral.all.size();
var variableDeclarationFragment = VariableDeclarationFragment.all.first;
size = size + VariableDeclarationFragment.all.size();
var numberLiteral = NumberLiteral.all.first;
size = size + NumberLiteral.all.size();
var stringLiteral = StringLiteral.all.first;
size = size + StringLiteral.all.size();
var continueStatement = ContinueStatement.all.first;
size = size + ContinueStatement.all.size();
var sourcePackageFragmentRoot = SourcePackageFragmentRoot.all.first;
size = size + SourcePackageFragmentRoot.all.size();
var parenthesizedExpression = ParenthesizedExpression.all.first;
size = size + ParenthesizedExpression.all.size();
var conditionalExpression = ConditionalExpression.all.first;
size = size + ConditionalExpression.all.size();
var iClassFile = IClassFile.all.first;
size = size + IClassFile.all.size();
var iType = IType.all.first;
size = size + IType.all.size();
var characterLiteral = CharacterLiteral.all.first;
size = size + CharacterLiteral.all.size();
var simpleType = SimpleType.all.first;
size = size + SimpleType.all.size();
var arrayCreation = ArrayCreation.all.first;
size = size + ArrayCreation.all.size();
var typeDeclaration = TypeDeclaration.all.first;
size = size + TypeDeclaration.all.size();
var textElement = TextElement.all.first;
size = size + TextElement.all.size();
var forStatement = ForStatement.all.first;
size = size + ForStatement.all.size();
var javadoc = Javadoc.all.first;
size = size + Javadoc.all.size();
var markerAnnotation = MarkerAnnotation.all.first;
size = size + MarkerAnnotation.all.size();
var synchronizedStatement = SynchronizedStatement.all.first;
size = size + SynchronizedStatement.all.size();
var returnStatement = ReturnStatement.all.first;
size = size + ReturnStatement.all.size();
var primitiveType = PrimitiveType.all.first;
size = size + PrimitiveType.all.size();
var booleanLiteral = BooleanLiteral.all.first;
size = size + BooleanLiteral.all.size();
var fieldAccess = FieldAccess.all.first;
size = size + FieldAccess.all.size();
var methodDeclaration = MethodDeclaration.all.first;
size = size + MethodDeclaration.all.size();
var thisExpression = ThisExpression.all.first;
size = size + ThisExpression.all.size();
var castExpression = CastExpression.all.first;
size = size + CastExpression.all.size();
var infixExpression = InfixExpression.all.first;
size = size + InfixExpression.all.size();
var singleVariableDeclaration = SingleVariableDeclaration.all.first;
size = size + SingleVariableDeclaration.all.size();
var packageDeclaration = PackageDeclaration.all.first;
size = size + PackageDeclaration.all.size();
var iImportDeclaration = IImportDeclaration.all.first;
size = size + IImportDeclaration.all.size();
var prefixExpression = PrefixExpression.all.first;
size = size + PrefixExpression.all.size();
var iCompilationUnit = ICompilationUnit.all.first;
size = size + ICompilationUnit.all.size();
var assignment = Assignment.all.first;
size = size + Assignment.all.size();
var tryStatement = TryStatement.all.first;
size = size + TryStatement.all.size();
var typeLiteral = TypeLiteral.all.first;
size = size + TypeLiteral.all.size();
var throwStatement = ThrowStatement.all.first;
size = size + ThrowStatement.all.size();
var postfixExpression = PostfixExpression.all.first;
size = size + PostfixExpression.all.size();
var anonymousClassDeclaration = AnonymousClassDeclaration.all.first;
size = size + AnonymousClassDeclaration.all.size();
size.println();
m.allContents().size().println();