model Core driver EMF {nsuri = "org.amma.dsl.jdt.core"};
model DOM driver EMF {nsuri = "org.amma.dsl.jdt.dom"};
model PrimitiveTypes driver EMF {nsuri = "org.amma.dsl.jdt.primitiveTypes"};

var size = 0;
var forStatement = ForStatement.all.first;
size = size + ForStatement.all.size();
var constructorInvocation = ConstructorInvocation.all.first;
size = size + ConstructorInvocation.all.size();
var ifStatement = IfStatement.all.first;
size = size + IfStatement.all.size();
var iField = IField.all.first;
size = size + IField.all.size();
var typeParameter = TypeParameter.all.first;
size = size + TypeParameter.all.size();
var fieldDeclaration = FieldDeclaration.all.first;
size = size + FieldDeclaration.all.size();
var anonymousClassDeclaration = AnonymousClassDeclaration.all.first;
size = size + AnonymousClassDeclaration.all.size();
var iJavaProject = IJavaProject.all.first;
size = size + IJavaProject.all.size();
var markerAnnotation = MarkerAnnotation.all.first;
size = size + MarkerAnnotation.all.size();
var block = Block.all.first;
size = size + Block.all.size();
var tryStatement = TryStatement.all.first;
size = size + TryStatement.all.size();
var returnStatement = ReturnStatement.all.first;
size = size + ReturnStatement.all.size();
var classInstanceCreation = ClassInstanceCreation.all.first;
size = size + ClassInstanceCreation.all.size();
var wildcardType = WildcardType.all.first;
size = size + WildcardType.all.size();
var switchStatement = SwitchStatement.all.first;
size = size + SwitchStatement.all.size();
var booleanLiteral = BooleanLiteral.all.first;
size = size + BooleanLiteral.all.size();
var simpleName = SimpleName.all.first;
size = size + SimpleName.all.size();
var synchronizedStatement = SynchronizedStatement.all.first;
size = size + SynchronizedStatement.all.size();
var typeLiteral = TypeLiteral.all.first;
size = size + TypeLiteral.all.size();
var castExpression = CastExpression.all.first;
size = size + CastExpression.all.size();
var enhancedForStatement = EnhancedForStatement.all.first;
size = size + EnhancedForStatement.all.size();
var packageDeclaration = PackageDeclaration.all.first;
size = size + PackageDeclaration.all.size();
var parameterizedType = ParameterizedType.all.first;
size = size + ParameterizedType.all.size();
var singleVariableDeclaration = SingleVariableDeclaration.all.first;
size = size + SingleVariableDeclaration.all.size();
var nullLiteral = NullLiteral.all.first;
size = size + NullLiteral.all.size();
var catchClause = CatchClause.all.first;
size = size + CatchClause.all.size();
var iMethod = IMethod.all.first;
size = size + IMethod.all.size();
var methodRefParameter = MethodRefParameter.all.first;
size = size + MethodRefParameter.all.size();
var iPackageFragment = IPackageFragment.all.first;
size = size + IPackageFragment.all.size();
var whileStatement = WhileStatement.all.first;
size = size + WhileStatement.all.size();
var methodInvocation = MethodInvocation.all.first;
size = size + MethodInvocation.all.size();
var conditionalExpression = ConditionalExpression.all.first;
size = size + ConditionalExpression.all.size();
var compilationUnit = CompilationUnit.all.first;
size = size + CompilationUnit.all.size();
var methodRef = MethodRef.all.first;
size = size + MethodRef.all.size();
var expressionStatement = ExpressionStatement.all.first;
size = size + ExpressionStatement.all.size();
var sourcePackageFragmentRoot = SourcePackageFragmentRoot.all.first;
size = size + SourcePackageFragmentRoot.all.size();
var continueStatement = ContinueStatement.all.first;
size = size + ContinueStatement.all.size();
var numberLiteral = NumberLiteral.all.first;
size = size + NumberLiteral.all.size();
var arrayType = ArrayType.all.first;
size = size + ArrayType.all.size();
var switchCase = SwitchCase.all.first;
size = size + SwitchCase.all.size();
var iJavaModel = IJavaModel.all.first;
size = size + IJavaModel.all.size();
var labeledStatement = LabeledStatement.all.first;
size = size + LabeledStatement.all.size();
var assertStatement = AssertStatement.all.first;
size = size + AssertStatement.all.size();
var superConstructorInvocation = SuperConstructorInvocation.all.first;
size = size + SuperConstructorInvocation.all.size();
var iImportDeclaration = IImportDeclaration.all.first;
size = size + IImportDeclaration.all.size();
var binaryPackageFragmentRoot = BinaryPackageFragmentRoot.all.first;
size = size + BinaryPackageFragmentRoot.all.size();
size.println();
m.allContents().size().println();